In this problem you have to write a program to check if two given binary trees are structurally equivalent.



Two trees are structurally equivalent if they are both null or if the left and right children of one are structurally equivalent to the RESPECTIVE children of the other. In other words, when you draw the trees on paper, they should LOOK alike (ignoring the values at the nodes).


Construct a binary search tree with the input in the second line and use this as the basis-tree. For each of the remaining N-1 lines, construct a binary search tree and compare against the basis tree for equivalence. If the trees are equivalent, print YES else print NO. Also print the depth difference between the two trees (ie, depth of the bigger tree minus the depth of the smaller tree). Both these for a given tree pair must be on one line separated by a space.



The answers for the different pairs must be on separate lines.
------------------------------------------------------------------------------------------------------------
#include<iostream>
#include<cstdlib>
using namespace std;
class Node{
    int data;
    Node *left;
    Node *right;
    public:
    Node(int data){
        this->data=data;
        right=left=NULL;
    }
    int getdata(){
        return data;
    }
    void setright(Node *right){
        this->right=right;
    }
    void setleft(Node *left){
        this->left=left;
    }
    Node* getright(){
        return right;
    }
    Node* getleft(){
        return left;
    }
};
class Tree{
    Node *root;
    public:
   Tree(){
        this->root=NULL;
    }
    void insert(int data){
        Node *node=new Node(data);
        Node *temp;
        Node *prev;
        if(root==NULL){
            root=node;
        }
        else{
            temp=root;
        while(temp!=NULL){
            prev=temp;
            if(data<=temp->getdata()){
                temp=temp->getleft();
            }
            else
                temp=temp->getright();
        }
        if(data<=prev->getdata()){
            prev->setleft(node);
        }
        else
            prev->setright(node);
        }
    }
  int compare(Node *root1,Node *root2){
      if(root1==NULL&&root2==NULL)
      return 1;
      if(root1!=NULL&&root2!=NULL){
         return(compare(root1->getleft(),root2->getleft())&&compare(root1->getright(),root2->getright())); 
      }
      return 0;
  }
  int depth(Node *node){
      if(node==NULL){
          return 0;
      }
      else{
         int Ldepth=depth(node->getleft());
         int Rdepth=depth(node->getright());
         if(Ldepth>Rdepth)
             return (Ldepth+1);
         else return (Rdepth+1);
      }     
      }
  Node* getroot(){
      
      return root;
  }
};
int main(){
    Tree T;
    int n,m;
    cin>>n;
    for(int i=1;i<=n;i++){
            Tree T1;
        while(1){
          if(i==1){    
            cin>>m;
            if(m==-1)
               break;
            else
            T.insert(m);
        }
        else{
            cin>>m;
            if(m==-1)
               break;
            else
            T1.insert(m);
        }
        }
    int d=abs((T.depth(T.getroot()))-(T1.depth(T1.getroot())));    
    if(i>1){    
    if(T.compare(T.getroot(),T1.getroot()))
        cout<<"YES"<<" "<<d<<endl;
    else 
        cout<<"NO"<<" "<<d<<endl;
    }
}
return 0;
}